package BOONGTOLJAVA;

public class b_6_10_exam01_Calculator {
    static double pi = 3.14159;

	static int plus(int x, int y) {
		return x + y;
	}
	
	static int minus(int x, int y) {
		return x - y;
	}
}
// static 필드?--> static 메서드와 마찬가지로 인스턴스(객체) 생성 없이 클래스 이름을 통해 직접 접근할 수 있습니다.
// static 와 인스턴스 각각에 대해 필드와 메서드가 있는데, 일단 지금은 인스턴스(객체) 생성 없이 클래스 이름을 통해 직접 접근할 수 있습니다. 정도만 알고 넘어가자!
// static 필드 : 모든 객체가 이 필드를 공유하기 때문에, 하나의 객체에서 값을 변경하면 다른 모든 객체에 영향을 미칩니다.
// 클래스 차원에서 관리: 객체와는 무관하게 클래스 자체가 이 필드를 관리합니다.
// 인스턴스 필드: 객체에 속하는 필드로, 객체가 생성될 때마다 각 객체가 고유하게 가지는 값을 저장합니다.
// 인스턴스 필드는 각 객체마다 다른 값을 가질 수 있으며, 객체를 통해서만 접근할 수 있습니다.
// 정적 필드는 모든 객체가 같은 값을 공유하는 필드예요. 쉽게 말해, 한 곳에서 정보를 바꾸면 모든 객체가 그 바뀐 정보를 같이 사용해요. // 변화를 인식하는 행위를 하면 이해가 쉽다!
// 인스턴스 필드는 각 객체가 독립적인 값을 가지는 필드예요. 쉽게 말해, 각각의 객체가 자신만의 고유한 정보를 가지고 있고, 그 값은 다른 객체에 영향을 주지 않아요.
// 자바에서 필드(Field)는 클래스 내부에 있지만, 메서드 외부에 선언된 변수를 말합니다.
// 자바에서 필드는 일반적으로 클래스의 속성을 정의하고 객체의 상태를 저장하는 데 사용되지만, 반드시 객체의 상태를 저장하는 용도로만 사용되는 것은 아닙니다.
// 사진의 필드이다 함은 '초기화 변수의 필드가 일반적인 필드보다 범위가 좁다!' 에서 초기화 변수의 필드이다 함이다!!!(인스턴스 필드만 해당!)