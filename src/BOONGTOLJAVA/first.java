package BOONGTOLJAVA; 
public class first {
      // static 은 first 라는 클래스의 객체가 만들어지지 않아도, 정의되어있던 main 메서드를 바로 자동으로 호출할수 있게 해준다!(원래는 '객체'.main... 형태로 호출해야 하는데 static 덕분에 안그래도 된다!!)
            // 원래 어떤 메서드를 호출(not 정의)하기 위해서는 이 메서드가 정의되어 있는 클래스의 객체가 만들어져야 한다!(파이썬과 비교 이해!)
            // void 는 main 메서드의 리턴값의 형태를 말한다!(not 리턴값의 정의!)
			public static void main(String[] boong) {      // 문자열은 다양한 형태의 데이터를 표현할 수 있는 가장 범용적인 형태입니다. 
                        // 자바 main 함수는 무조건 String[] 형태의 매개변수를 가져야 한다!!!(왜냐하면 (합당한) 약속이기 때문!!)
				// Java에서 main 메서드의 매개변수인 String[] boong에서 대괄호 []는 해당 매개변수가 문자열을 원소로 갖는 배열임을 나타냅니다.
                        // 터미널(커맨드라인)에서 java first.java arg1 arg2 arg3 와 같이 하면 boong 은 ["arg1","arg2","arg3"]와 같은 문자열을 원소로 갖는 배열이 된다!!!
                        // 각 인수(요소)를 String 화 하고 []로 묶어서 boong 에 저장해라!
                        // boong = new String[]{"arg1", "arg2", "arg3"}; 이라는 과정이 숨겨져 있는것!
                        // 프로그램을 실행할 때 터미널에서의 값을 제공하지 않으면, boong은 빈 배열이 됩니다.
                        // 자바에서 모든 커맨드라인 인수는 문자열로 처리됩니다. 이 때문에 String[] 배열이 매개변수로 사용됩니다. 
                        // 만약 String[] 이 아닌 String 이라면 하나의 인수만 받을 수 있다. 따라서 '배열화' 해야한다!
                        // 프로그램 내에서 필요에 따라 이 문자열을 다른 데이터 타입으로 변환하여 사용할 수 있습니다.
                        // 자바에서 main 함수의 매개변수가 커맨드라인 인수를 받도록 설계된 것은 프로그램의 유연성을 높이고, 자동화 및 스크립트화를 지원하며, 표준화된 실행 방식을 제공하기 위함입니다. 
                        // 이러한 설계는 자바 애플리케이션의 실행 및 관리에 있어 강력한 도구를 제공하며, 다양한 환경에서 일관되게 동작하도록 합니다.
				// boong 은 main 메서드의 매개변수의 이름!
System.out.println("boong");    // println 은 출력+개행의 의미를 지닌다!
} 
    
} 
// main 함수는 자바프로그램이 실행될때 자동으로 호출되는 유일한 메서드다!! main 함수는 static 이다. 즉 main 함수는 프로그램이 실행될때 자동으로 호출되는데 이때 객체의 생성이 선행될수 없을 수도 있기 때문에(클래스 초기화 문제) 모든 경우를 충족시키려면 static 이 올바르다!
// 1. 자동으로 호출된다.
// 2. "호출하기 전에" 현재 클래스의 객체의 생성이 선행된다.--> static 인지 아닌지의 여부 !!
// main 메서드?--> 1 & ~2!!
// 자바 프로그램 실행 시 main 메서드가 실행되기까지의 과정은 시스템 성능에 따라 미세한 차이가 있을 수 있지만, 대부분의 상황에서는 사용자가 느낄 수 없을 정도로 빠르게 이루어집니다. 

// 자바에서 main 메서드는 프로그램의 진입점이며, 이 메서드가 호출되기 전에는 객체를 생성할 수 있는 환경(메모리 공간)이 마련되지 않기 때문에 객체 생성이 불가능합니다. --> 일반적인 경우

// JVM은 자바 프로그램을 실행할 때 public static void main(String[] args) 형태의 메서드를 진입점으로 인식합니다. 따라서 main 메서드는 반드시 static이어야만 JVM이 이를 올바르게 인식하고 호출할 수 있습니다.
// 목표?--> 모든 경우에 대한 main 메서드의 일관된 정의! // 일반적인 경우?--> main 메서드가 호출되기 전에 객체를 생성할수 없다.// 특수한 경우?--> main 메서드가 호출되기 전에 객체를 생성할수 있다. 일반적인 경우와 특수한 경우 모두에서 일관되게 main 메서드를 정의하려면, static이 유일한 방법이다!
// public 과 같은 접근 제어자는 나중에 package 복습할때 자동으로 다시 공부하게끔 된다!! 지금은 일단 넘어가기!